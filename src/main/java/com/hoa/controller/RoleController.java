/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:03 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.RoleDTO;
import com.hoa.entities.Role;
import com.hoa.service.RoleService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;

/**
 * REST controller for managing {@link Role}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/role")
public class RoleController {

	private final Logger log = LoggerFactory.getLogger(RoleController.class);

	private final RoleService roleService;
	
    private final EntityDTOMapper entityDtoMapper;


	public RoleController(RoleService entityService, EntityDTOMapper entityDtoMapper) {
		this.roleService = entityService;
		this.entityDtoMapper = entityDtoMapper;
	}

	/**
	 * {@code POST  /role} : Create a new role.
	 *
	 * @param role the role to create.
	 * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with
	 *         body the new role.
	 */
	@PostMapping("/addRole")
	public ResponseEntity<Role> createRole(@RequestBody @Valid RoleDTO roleDTO) {
		
		Role role = entityDtoMapper.toEntity(roleDTO);
		
		log.debug("REST request to save Role : {}", role);
		return new ResponseEntity<>(roleService.create(role), HttpStatus.CREATED);
	}

	/**
	 * {@code PUT  /role} : Updates an existing role.
	 *
	 * @param role the role to update.
	 * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body
	 *         the updated role, or with status {@code 400 (Bad Request)} if the
	 *         role is not valid, or with status {@code 500 (Internal Server Error)}
	 *         if the role couldn't be updated.
	 */
	@PutMapping("/updateRole/{id}")
	public ResponseEntity<?> updateRole(@PathVariable(value = "id") Integer id, @Valid @RequestBody RoleDTO roleDTO) {
		try {
			
			Role role = entityDtoMapper.toEntity(roleDTO);
			log.debug("REST request to update Role : {}", role);
			Role result = roleService.update(id, role);

			return ResponseEntity.ok().body(result);
		} catch (Exception e) {
			log.error("Error creating Role: {}", e.getMessage());
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating Role");
		}

	}

	/**
	 * {@code GET  /role} : get all the roles.
	 *
	 * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list
	 *         of role in body.
	 */

	@GetMapping("/getRoles")
	public ResponseEntity<List<Role>> getAllRole() {
		log.debug("REST request to get all roles");
		List<Role> lst = roleService.getAll();

		return new ResponseEntity<>(lst, HttpStatus.OK);
	}

	/**
	 * {@code GET  /role/:id} : get the "id" role.
	 *
	 * @param id the id of the role to retrieve.
	 * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body
	 *         the role, or with status {@code 404 (Not Found)}.
	 */
	@GetMapping("/getRoleById/{id}")
	public ResponseEntity<Role> getOneRole(@PathVariable(value = "id") Integer id) {
		log.debug("REST request to get Role : {}", id);
		Role e = roleService.getOne(id);

		return new ResponseEntity<>(e, HttpStatus.OK);
	}

	/**
	 * {@code DELETE  /role/:id} : delete the "id" role.
	 *
	 * @param id the id of the role to delete.
	 * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
	 */
	@DeleteMapping("deleteRole/{id}")
	public ResponseEntity<Void> deleteRole(@PathVariable(value = "id") Integer id) {
		log.debug("REST request to delete Role : {}", id);
		roleService.delete(id);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}

}
