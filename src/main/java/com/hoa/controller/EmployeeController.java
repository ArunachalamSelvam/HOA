/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:03 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.EmployeeDTO;
import com.hoa.dto.UserDTO;
import com.hoa.entities.Employee;
import com.hoa.entities.User;
import com.hoa.requestEntities.EmployeeRequest;
import com.hoa.service.EmployeeService;
import com.hoa.service.UserService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link Employee}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/employee")
public class EmployeeController {

    private final Logger log = LoggerFactory.getLogger(EmployeeController.class);
	
    private final EmployeeService entityService;
    
    private final UserService userService;
    
    private final EntityDTOMapper entityDtoMapper;

 	public EmployeeController (EmployeeService entityService, EntityDTOMapper entityDTOMapper, UserService userService) {
		this.entityService = entityService;
		this.entityDtoMapper = entityDTOMapper;
		this.userService = userService;
	}

    /**
     * {@code POST  /employee} : Create a new employee.
     *
     * @param employee the employee to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new employee.
     */
	@PostMapping("/add")
	public ResponseEntity<Employee> createEmployee(@RequestBody @Valid EmployeeRequest employeeRequest) {
		
		EmployeeDTO employeeDto = employeeRequest.getEmployeeDto();

		UserDTO userDto = employeeRequest.getUserDto();
		
		User user = entityDtoMapper.toEntity(userDto);
		
		User savedUser = userService.create(user);
		employeeDto.setUserid(savedUser.getUserid());
		Employee employee = entityDtoMapper.toEntity(employeeDto);
		
		
		Employee savedEmployee = entityService.create(employee);
		
         log.debug("REST request to save Employee : {}", employee);
         return ResponseEntity.ok(savedEmployee);
    }

   /**
     * {@code PUT  /employee} : Updates an existing employee.
     *
     * @param employee the employee to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated employee,
     * or with status {@code 400 (Bad Request)} if the employee is not valid,
     * or with status {@code 500 (Internal Server Error)} if the employee couldn't be updated.
     */
    @PutMapping("/update{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable(value = "id") Integer employeeId,@Valid @RequestBody EmployeeRequest employeeRequest) {
    	EmployeeDTO employeeDto = employeeRequest.getEmployeeDto();
        UserDTO userDto = employeeRequest.getUserDto();

        Employee employee = entityDtoMapper.toEntity(employeeDto);
        User user = entityDtoMapper.toEntity(userDto);
        
        userService.update(employee.getUserid(), user);

        log.debug("REST request to update Employee with ID {}: {}", employeeId, employee);
        
        Employee result = entityService.update(employeeId, employee);
        
        if (result != null) {
            return ResponseEntity.ok().body(result);
        } else {
            return ResponseEntity.notFound().build(); // or handle it according to your application logic
        }
    }

    /**
     * {@code GET  /employee} : get all the employees.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of employee in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<Employee>> getAllEmployee() {
	    log.debug("REST request to get all employees");
        List<Employee> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /employee/:id} : get the "id" employee.
     *
     * @param id the id of the employee to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the employee, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<Employee> getOneEmployee(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get Employee : {}", id);
        Employee e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /employee/:id} : delete the "id" employee.
     *
     * @param id the id of the employee to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Employee : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
