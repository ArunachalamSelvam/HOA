/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:04 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.StateDTO;
import com.hoa.entities.State;
import com.hoa.service.StateService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link State}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/state")
public class StateController {

    private final Logger log = LoggerFactory.getLogger(StateController.class);
	
    private final StateService entityService;
    
    private final EntityDTOMapper entityDtoMapper;


 	public StateController (StateService entityService, EntityDTOMapper entityDtoMapper) {
		this.entityService = entityService;
		this.entityDtoMapper = entityDtoMapper;
	}

    /**
     * {@code POST  /state} : Create a new state.
     *
     * @param state the state to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new state.
     */
	@PostMapping("/add")
	public ResponseEntity<State> createState(@RequestBody @Valid StateDTO stateDto) {
		
		State state = entityDtoMapper.toEntity(stateDto);
		
         log.debug("REST request to save State : {}", state);
         return new ResponseEntity<>(entityService.create(state), HttpStatus.CREATED);
    }
	
	 @PostMapping("/addStateList")
	    public void addStates(@RequestBody List<StateDTO> stateDTOList) {
	        entityService.addStates(stateDTOList);
	    }

   /**
     * {@code PUT  /state} : Updates an existing state.
     *
     * @param state the state to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated state,
     * or with status {@code 400 (Bad Request)} if the state is not valid,
     * or with status {@code 500 (Internal Server Error)} if the state couldn't be updated.
     */
    @PutMapping("/update")
    public ResponseEntity<State> updateState(@Valid @RequestBody StateDTO stateDto) {
    	
    	State state = entityDtoMapper.toEntity(stateDto);
    	
        log.debug("REST request to update State : {}", state);
        State result = entityService.update(state);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /state} : get all the states.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of state in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<State>> getAllState() {
	    log.debug("REST request to get all states");
        List<State> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /state/:id} : get the "id" state.
     *
     * @param id the id of the state to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the state, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<State> getOneState(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get State : {}", id);
        State e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /state/:id} : delete the "id" state.
     *
     * @param id the id of the state to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteState(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete State : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
