/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.ClientAddressDTO;
import com.hoa.entities.ClientAddress;
import com.hoa.exception.ClientIdNotFoundException;
import com.hoa.service.ClientaddressService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link ClientAddress}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/clientaddress")
public class ClientaddressController {

    private final Logger log = LoggerFactory.getLogger(ClientaddressController.class);
	
    private final ClientaddressService entityService;
    
    private final EntityDTOMapper entityDTOMapper;

 	public ClientaddressController (ClientaddressService entityService, EntityDTOMapper entityDTOMapper) {
		this.entityService = entityService;
		this.entityDTOMapper = entityDTOMapper;
	}

    /**
     * {@code POST  /clientaddress} : Create a new clientaddress.
     *
     * @param clientaddress the clientaddress to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new clientaddress.
     */
	@PostMapping("/add")
	public ResponseEntity<ClientAddress> createClientaddress(@RequestBody @Valid ClientAddressDTO clientaddressDto) {
		
		ClientAddress clientaddress= entityDTOMapper.toEntity(clientaddressDto);
         log.debug("REST request to save Clientaddress : {}", clientaddress);
         return new ResponseEntity<>(entityService.create(clientaddress), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /clientaddress} : Updates an existing clientaddress.
     *
     * @param clientaddress the clientaddress to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated clientaddress,
     * or with status {@code 400 (Bad Request)} if the clientaddress is not valid,
     * or with status {@code 500 (Internal Server Error)} if the clientaddress couldn't be updated.
 * @throws ClientIdNotFoundException 
     */
    @PutMapping("/update/{ClientAddressId}")
    public ResponseEntity<ClientAddress> updateClientaddress(@PathVariable(value = "clientAddressId") Integer clientAddressId,@Valid @RequestBody ClientAddressDTO clientaddressDto) throws ClientIdNotFoundException {
    	
    	ClientAddress clientaddress= entityDTOMapper.toEntity(clientaddressDto);
        log.debug("REST request to update Clientaddress : {}", clientaddress);
        ClientAddress result = entityService.update(clientAddressId,clientaddress);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /clientaddress} : get all the clientaddresss.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of clientaddress in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<ClientAddress>> getAllClientaddress() {
	    log.debug("REST request to get all clientaddresss");
        List<ClientAddress> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /clientaddress/:id} : get the "id" clientaddress.
     *
     * @param id the id of the clientaddress to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the clientaddress, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<ClientAddress> getOneClientaddress(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get Clientaddress : {}", id);
        ClientAddress e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /clientaddress/:id} : delete the "id" clientaddress.
     *
     * @param id the id of the clientaddress to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteClientaddress(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Clientaddress : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
