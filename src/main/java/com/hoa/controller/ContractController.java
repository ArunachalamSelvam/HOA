/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.AddressDTO;
import com.hoa.dto.ClientDTO;
import com.hoa.dto.CommunityDTO;
import com.hoa.dto.ContractDTO;
import com.hoa.dto.UserDTO;
import com.hoa.entities.Address;
import com.hoa.entities.Client;
import com.hoa.entities.ClientAddress;
import com.hoa.entities.Community;
import com.hoa.entities.Contract;
import com.hoa.entities.User;
import com.hoa.exception.ClientIdNotFoundException;
import com.hoa.requestEntities.ClientRequest;
import com.hoa.requestEntities.ContractRequest;
import com.hoa.requestEntities.ContractRequest2;
import com.hoa.requestEntities.Contractrequest3;
import com.hoa.service.AddressService;
import com.hoa.service.ClientService;
import com.hoa.service.ClientaddressService;
import com.hoa.service.CommunityService;
import com.hoa.service.ContractService;
import com.hoa.service.UserService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;

import java.util.ArrayList;
import java.util.List;


/**
 * REST controller for managing {@link Contract}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/contract")
public class ContractController {

    private final Logger log = LoggerFactory.getLogger(ContractController.class);
    
    private final EntityDTOMapper entityDtoMapper;
	
    private final ContractService entityService;
    
    private final UserService userService;
    
    private final CommunityService communityService;
    
    private final ClientService clientService;
    
  private final AddressService addressService;
    
    private final ClientaddressService clientAddressService;

 	

    public ContractController(EntityDTOMapper entityDtoMapper, ContractService entityService, UserService userService,
			CommunityService communityService, ClientService clientService,AddressService addressService, ClientaddressService clientAddressService) {
		super();
		this.entityDtoMapper = entityDtoMapper;
		this.entityService = entityService;
		this.userService = userService;
		this.communityService = communityService;
		this.clientService = clientService;
		this.addressService = addressService;
		this.clientAddressService = clientAddressService;
	}

	/**
     * {@code POST  /contract} : Create a new contract.
     *
     * @param contract the contract to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new contract.
	 * @throws ClientIdNotFoundException 
     */
	
/*    
    @PostMapping("/add")
	public ResponseEntity<Contract> createContract(@RequestBody @Valid ContractRequest contractRequest) {
		
//		Contract contract = entityDtoMapper.toEntity(contractDTO);
//		Contract contract = new Contract();
//    	contract.setContractid(contractDTO.getContractid());
//    	contract.setAnnualrenewalfee(contractDTO.getAnnualrenewalfee());
//    	contract.setSalespersonid(contractDTO.getSalespersonid());
//    	contract.setClientid(contractDTO.getClientid());
//    	contract.setContractcode(contractDTO.getContractcode());
//    	contract.setBuisnessname(contractDTO.getBuisnessname());
//    	contract.setBusinessaddressid(contractDTO.getBusinessaddressid());
//    	contract.setCommunicationchannel(contractDTO.getCommunicationchannel());
//    	contract.setPlanid(contractDTO.getPlanid());
//    	contract.setOnetimesetup(contractDTO.getOnetimesetup());
//    	contract.setSizeofthecommunity(contractDTO.getSizeofthecommunity());
//    	contract.setRenewalcycles(contractDTO.getRenewalcycles());
//    	contract.setIstermsaccepted(contractDTO.getIstermsaccepted());
//    	contract.setCreatedbyid(contractDTO.getCreatedbyid());
//    	contract.setCreateddate(contractDTO.getCreateddate());
//    	contract.setModifiedbyid(contractDTO.getModifiedbyid());
//    	contract.setModifieddate(contractDTO.getModifieddate());
		
//         log.debug("REST request to save Contract : {}", contract);
//         return new ResponseEntity<>(entityService.create(contract), HttpStatus.CREATED);
		
		ContractDTO contractDto = contractRequest.getContractDto();
		UserDTO userDto = contractRequest.getUserDto();
		CommunityDTO communityDto = contractRequest.getCommunityDto();
		
		User user = entityDtoMapper.toEntity(userDto);
		
		User savedUser = userService.create(user);
		
		communityDto.setPresidentuserid(savedUser.getUserid());
		Community community = entityDtoMapper.toEntity(communityDto);
		Community savedCommunity = communityService.create(community);
		
		ClientDTO clientDto = new ClientDTO(savedUser.getUserid(),savedCommunity.getCommunityid(),savedUser.getFirstname(),1);
		
		Client client = entityDtoMapper.toEntity(clientDto);
		Client savedClient = clientService.create(client);
		
		contractDto.setClientid(savedClient.getClientid());
		Contract contract = entityDtoMapper.toEntity(contractDto);
		Contract savedContract = entityService.create(contract);
		

      log.debug("REST request to save Contract : {}", contract);
      return new ResponseEntity<>(entityService.create(savedContract), HttpStatus.CREATED);
		
		
		
    }
*/


//	@PostMapping("/add")
//	public ResponseEntity<Contract> createContract(@RequestBody @Valid ContractRequest2 contractRequest) {
//		
//		ContractDTO contractDto = contractRequest.getContractDto();
//	
//		CommunityDTO communityDto = contractRequest.getCommunityDto();
//	
//		
//		
//		Community community = entityDtoMapper.toEntity(communityDto);
//		
//		
//		Contract contract = entityDtoMapper.toEntity(contractDto);
//		Contract savedContract = entityService.create(contract);
//		
//		community.setContractid(savedContract.getContractid());
//		
//		Community savedCommunity = communityService.create(community);
//
//      log.debug("REST request to save Contract : {}", contract);
//      return new ResponseEntity<>(entityService.create(savedContract), HttpStatus.CREATED);
//		
//		
//		
//    }
    
    @PostMapping("/add")
	public ResponseEntity<Contract> createContract(@RequestBody @Valid Contractrequest3 contractRequest) throws ClientIdNotFoundException {
		
		ContractDTO contractDto = contractRequest.getContractDto();
	
		
		ClientRequest clientRequest = contractRequest.getClientRequest();
		User user = entityDtoMapper.toEntity(clientRequest.getUserDto());
		User savedUser = userService.create(user);
		
		ClientDTO clientDto = clientRequest.getClientDto();
		
		clientDto.setUserid(savedUser.getUserid());
		Client client = entityDtoMapper.toEntity(clientRequest.getClientDto());
		Client savedClient = clientService.create(client);
		
		AddressDTO addressDTO = clientRequest.getAddressDto();
		Address address = entityDtoMapper.toEntity(addressDTO);
		Address savedAddress = addressService.create(address);
		
		ClientAddress clientAddress = new ClientAddress();
		clientAddress.setAddressid(savedAddress.getAddressid());
		clientAddress.setClientid(savedClient.getClientid());
		
		ClientAddress savedClientAddress = clientAddressService.create(clientAddress);
	
		contractDto.setClientid(savedClient.getClientid());
		
		
		CommunityDTO communityDto = new CommunityDTO();
		communityDto.setAddressid(contractDto.getBusinessaddressid());
		communityDto.setCommunitysize(contractDto.getSizeofthecommunity());
		communityDto.setPlanid(contractDto.getPlanid());
		communityDto.setCreatedbyid(contractDto.getSalespersonid());
		communityDto.setCreateddate(contractDto.getCreateddate());
		
		Community community = entityDtoMapper.toEntity(communityDto);
		
		
		Contract contract = entityDtoMapper.toEntity(contractDto);
		Contract savedContract = entityService.create(contract);
		
		community.setContractid(savedContract.getContractid());
		
		Community savedCommunity = communityService.create(community);
		savedClient.setCommunityid(savedCommunity.getCommunityid());
		
		clientService.update(savedClient.getClientid(), savedClient);

      log.debug("REST request to save Contract : {}", contract);
      return ResponseEntity.ok(savedContract);
		
		
		
    }

	
   /**
     * {@code PUT  /contract} : Updates an existing contract.
     *
     * @param contract the contract to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated contract,
     * or with status {@code 400 (Bad Request)} if the contract is not valid,
     * or with status {@code 500 (Internal Server Error)} if the contract couldn't be updated.
     */
    @PutMapping("/update")
    public ResponseEntity<ContractDTO> updateContract(@Valid @RequestBody ContractDTO contractDTO) {
    	
    	Contract contract = new Contract();
    	contract.setContractid(contractDTO.getContractid());
    	contract.setAnnualrenewalfee(contractDTO.getAnnualrenewalfee());
    	contract.setSalespersonid(contractDTO.getSalespersonid());
    	contract.setClientid(contractDTO.getClientid());
    	contract.setContractcode(contractDTO.getContractcode());
    	contract.setBuisnessname(contractDTO.getBuisnessname());
    	contract.setBusinessaddressid(contractDTO.getBusinessaddressid());
    	contract.setCommunicationchannel(contractDTO.getCommunicationchannel());
    	contract.setPlanid(contractDTO.getPlanid());
    	contract.setOnetimesetup(contractDTO.getOnetimesetup());
    	contract.setSizeofthecommunity(contractDTO.getSizeofthecommunity());
    	contract.setRenewalcycles(contractDTO.getRenewalcycles());
    	contract.setIstermsaccepted(contractDTO.getIstermsaccepted());
    	contract.setCreatedbyid(contractDTO.getCreatedbyid());
    	contract.setCreateddate(contractDTO.getCreateddate());
    	contract.setModifiedbyid(contractDTO.getModifiedbyid());
    	contract.setModifieddate(contractDTO.getModifieddate());
    	
    	
        log.debug("REST request to update Contract : {}", contract);
        Contract result = entityService.update(contract);
        
        ContractDTO rContractDto = new ContractDTO();
        rContractDto.setContractid(result.getContractid());
        rContractDto.setAnnualrenewalfee(result.getAnnualrenewalfee());
        rContractDto.setSalespersonid(result.getSalespersonid());
        rContractDto.setClientid(result.getClientid());
        rContractDto.setContractcode(result.getContractcode());
        rContractDto.setBuisnessname(result.getBuisnessname());
        rContractDto.setBusinessaddressid(result.getBusinessaddressid());
        rContractDto.setCommunicationchannel(result.getCommunicationchannel());
        rContractDto.setPlanid(result.getPlanid());
        rContractDto.setOnetimesetup(result.getOnetimesetup());
        rContractDto.setSizeofthecommunity(result.getSizeofthecommunity());
        rContractDto.setRenewalcycles(result.getRenewalcycles());
        rContractDto.setIstermsaccepted(result.getIstermsaccepted());
        rContractDto.setCreatedbyid(result.getCreatedbyid());
        rContractDto.setCreateddate(result.getCreateddate());
        rContractDto.setModifiedbyid(result.getModifiedbyid());
        rContractDto.setModifieddate(result.getModifieddate());
        
        return ResponseEntity.ok().body(rContractDto);
    }

    /**
     * {@code GET  /contract} : get all the contracts.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of contract in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<ContractDTO>> getAllContract() {
	    log.debug("REST request to get all contracts");
        List<Contract> contractList = entityService.getAll();

        List<ContractDTO> contractDtoList = new ArrayList<>();
        for(Contract contract : contractList) {
        	
        	ContractDTO contractDto = new ContractDTO();
        	contractDto.setContractid(contract.getContractid());
        	contractDto.setAnnualrenewalfee(contract.getAnnualrenewalfee());
        	contractDto.setSalespersonid(contract.getSalespersonid());
        	contractDto.setClientid(contract.getClientid());
        	contractDto.setContractcode(contract.getContractcode());
        	contractDto.setBuisnessname(contract.getBuisnessname());
        	contractDto.setBusinessaddressid(contract.getBusinessaddressid());
        	contractDto.setCommunicationchannel(contract.getCommunicationchannel());
        	contractDto.setPlanid(contract.getPlanid());
        	contractDto.setOnetimesetup(contract.getOnetimesetup());
        	contractDto.setSizeofthecommunity(contract.getSizeofthecommunity());
        	contractDto.setRenewalcycles(contract.getRenewalcycles());
        	contractDto.setIstermsaccepted(contract.getIstermsaccepted());
        	contractDto.setCreatedbyid(contract.getCreatedbyid());
        	contractDto.setCreateddate(contract.getCreateddate());
        	contractDto.setModifiedbyid(contract.getModifiedbyid());
        	contractDto.setModifieddate(contract.getModifieddate());
        	
        	contractDtoList.add(contractDto);
        	
        }
        return new ResponseEntity<>(contractDtoList,HttpStatus.OK);
    }

    /**
     * {@code GET  /contract/:id} : get the "id" contract.
     *
     * @param id the id of the contract to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the contract, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<ContractDTO> getOneContract(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get Contract : {}", id);
        Contract contract = entityService.getOne(id);

        ContractDTO contractDto = new ContractDTO();
    	contractDto.setContractid(contract.getContractid());
    	contractDto.setAnnualrenewalfee(contract.getAnnualrenewalfee());
    	contractDto.setSalespersonid(contract.getSalespersonid());
    	contractDto.setClientid(contract.getClientid());
    	contractDto.setContractcode(contract.getContractcode());
    	contractDto.setBuisnessname(contract.getBuisnessname());
    	contractDto.setBusinessaddressid(contract.getBusinessaddressid());
    	contractDto.setCommunicationchannel(contract.getCommunicationchannel());
    	contractDto.setPlanid(contract.getPlanid());
    	contractDto.setOnetimesetup(contract.getOnetimesetup());
    	contractDto.setSizeofthecommunity(contract.getSizeofthecommunity());
    	contractDto.setRenewalcycles(contract.getRenewalcycles());
    	contractDto.setIstermsaccepted(contract.getIstermsaccepted());
    	contractDto.setCreatedbyid(contract.getCreatedbyid());
    	contractDto.setCreateddate(contract.getCreateddate());
    	contractDto.setModifiedbyid(contract.getModifiedbyid());
    	contractDto.setModifieddate(contract.getModifieddate());
    	
        return new ResponseEntity<>(contractDto, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /contract/:id} : delete the "id" contract.
     *
     * @param id the id of the contract to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteContract(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Contract : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
