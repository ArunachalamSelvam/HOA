/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;


import com.hoa.dto.ContractDTO;
import com.hoa.entities.Contract;
import com.hoa.exception.AddressNotFoundException;
import com.hoa.exception.ClientIdNotFoundException;
import com.hoa.exception.CommunityNotFoundException;
import com.hoa.exception.ContractNotFoundException;
import com.hoa.exception.UserNotFoundException;
import com.hoa.requestEntities.Contractrequest3;
import com.hoa.responseEntities.ContractListResponse;
import com.hoa.responseEntities.ContractUpdateResponse;
import com.hoa.service.ContractService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.mail.MessagingException;
import javax.validation.Valid;

import java.util.List;


/**
 * REST controller for managing {@link Contract}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/contract")
public class ContractController {

    private final Logger log = LoggerFactory.getLogger(ContractController.class);
    
    private final EntityDTOMapper entityDtoMapper;
	
    private final ContractService entityService;
  

 	

    public ContractController(EntityDTOMapper entityDtoMapper, ContractService entityService) {
	
		this.entityDtoMapper = entityDtoMapper;
		this.entityService = entityService;
    }	
	/**
     * {@code POST  /contract} : Create a new contract.
     *
     * @param contract the contract to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new contract.
	 * @throws ClientIdNotFoundException 
     */
    
    
    @PostMapping("/add")
    public ResponseEntity<Contract> createContract(@RequestBody @Valid Contractrequest3 contractRequest) throws ClientIdNotFoundException {
        try {
            Contract savedContract = entityService.createContract(contractRequest);
            log.debug("REST request to save Contract : {}", savedContract);
            return ResponseEntity.ok(savedContract);
        } catch (Exception ex) {
            log.error("An error occurred while creating contract", ex);
            ex.printStackTrace();
            throw ex; // Re-throw the exception to ensure proper error handling
        }
    }
	
    
  


	
   /**
     * {@code PUT  /contract} : Updates an existing contract.
     *
     * @param contract the contract to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated contract,
     * or with status {@code 400 (Bad Request)} if the contract is not valid,
     * or with status {@code 500 (Internal Server Error)} if the contract couldn't be updated.
 * @throws ContractNotFoundException 
     */
//    @PutMapping("/update/{id}")
//    public ResponseEntity<ContractDTO> updateContract(@PathVariable (value = "id") Integer id,@Valid @RequestBody ContractDTO contractDTO) throws ContractNotFoundException {
//    	
//    	Contract contract = entityDtoMapper.toEntity(contractDTO);
//    	
//        log.debug("REST request to update Contract : {}", contract);
//        Contract result = entityService.update(id, contract);
//        
//        ContractDTO rContractDto = entityDtoMapper.toDTO(contract);
//        rContractDto.setModifieddate(result.getModifieddate());
//        
//        return ResponseEntity.ok().body(rContractDto);
//    }

    /**
     * {@code GET  /contract} : get all the contracts.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of contract in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<Contract>> getAllContract() {
	    log.debug("REST request to get all contracts");
        List<Contract> contractList = entityService.getAll();

        return new ResponseEntity<>(contractList,HttpStatus.OK);
    }

    /**
     * {@code GET  /contract/:id} : get the "id" contract.
     *
     * @param id the id of the contract to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the contract, or with status {@code 404 (Not Found)}.
     * @throws ContractNotFoundException 
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<Contract> getOneContract(@PathVariable(value = "id") Integer id) throws ContractNotFoundException {
        log.debug("REST request to get Contract : {}", id);
        Contract contract = entityService.getOne(id);

       
    	
        return new ResponseEntity<>(contract, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /contract/:id} : delete the "id" contract.
     *
     * @param id the id of the contract to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteContract(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Contract : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
    
    @PutMapping("/updateActiveStatus")
    public ResponseEntity<String> updateActiveStatus(@RequestParam("clientId") Integer clientId, @RequestParam("activeStatus") Boolean activeStatus) throws UserNotFoundException, MessagingException {
        try {
            boolean isUpdated =entityService.updateActiveStatus(clientId, activeStatus);
            if (isUpdated) {
                return ResponseEntity.ok("Active status updated successfully");
            } else {
                return ResponseEntity.badRequest().body("Failed to update active status");
            }
        } catch (CommunityNotFoundException | ContractNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @GetMapping("/employeeContracts")
    public ResponseEntity<List<ContractListResponse>> findEmployeeContractsBySalesPersonId(
            @RequestParam(required = false, defaultValue = "0") Integer salesManagerId,
            @RequestParam(required = false, defaultValue = "0") Integer salesPersonId) {
        try {
            List<ContractListResponse> contracts = entityService.findEmployeeContractsBySalesPersonId(salesManagerId, salesPersonId);
            return ResponseEntity.ok(contracts);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
    
    @PutMapping("updateContract/{contractId}")
    public ResponseEntity<Contract> updateContract(@PathVariable(value = "contractId") Integer contractId, @RequestBody Contractrequest3 contractRequest) {
        try {
            Contract updatedContract = entityService.updateContract(contractId,contractRequest);
            return ResponseEntity.ok(updatedContract);
        } catch (ClientIdNotFoundException | CommunityNotFoundException | UserNotFoundException | AddressNotFoundException e) {
            return ResponseEntity.status(404).body(null); // or handle specific exceptions with different statuses
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null); // handle unexpected exceptions
        }
    }
    
    @GetMapping("/getContractUpdateResponse/{contractId}")
    public ContractUpdateResponse getContractUpdateResponse(@PathVariable Integer contractId) {
        return entityService.getContractUpdateResponse(contractId);
    }
    


}
