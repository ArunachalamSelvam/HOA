/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.AmenityBookingDTO;
import com.hoa.entities.AmenityBooking;
import com.hoa.service.AmenitybookingService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link AmenityBooking}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/amenitybooking")
public class AmenityBookingController {

    private final Logger log = LoggerFactory.getLogger(AmenityBookingController.class);
    
    private final EntityDTOMapper entityDtoMapper;
	
    private final AmenitybookingService entityService;

 	public AmenityBookingController (AmenitybookingService entityService, EntityDTOMapper entityDtoMapper) {
		this.entityService = entityService;
		this.entityDtoMapper = entityDtoMapper;
	}

    /**
     * {@code POST  /amenitybooking} : Create a new amenitybooking.
     *
     * @param amenitybooking the amenitybooking to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new amenitybooking.
     */
	@PostMapping("/add")
	public ResponseEntity<AmenityBooking> createAmenitybooking(@RequestBody @Valid AmenityBookingDTO amenityBookingDto) {
		
		 AmenityBooking amenitybooking = entityDtoMapper.toEntity(amenityBookingDto);
		
         log.debug("REST request to save Amenitybooking : {}", amenitybooking);
         return new ResponseEntity<>(entityService.create(amenitybooking), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /amenitybooking} : Updates an existing amenitybooking.
     *
     * @param amenitybooking the amenitybooking to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated amenitybooking,
     * or with status {@code 400 (Bad Request)} if the amenitybooking is not valid,
     * or with status {@code 500 (Internal Server Error)} if the amenitybooking couldn't be updated.
     */
    @PutMapping("/update")
    public ResponseEntity<AmenityBooking> updateAmenitybooking(@Valid @RequestBody AmenityBookingDTO amenityBookingDto) {
    	
    	AmenityBooking amenitybooking = entityDtoMapper.toEntity(amenityBookingDto);
		
        log.debug("REST request to update Amenitybooking : {}", amenitybooking);
        AmenityBooking result = entityService.update(amenitybooking);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /amenitybooking} : get all the amenitybookings.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of amenitybooking in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<AmenityBooking>> getAllAmenitybooking() {
	    log.debug("REST request to get all amenitybookings");
        List<AmenityBooking> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /amenitybooking/:id} : get the "id" amenitybooking.
     *
     * @param id the id of the amenitybooking to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the amenitybooking, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<AmenityBooking> getOneAmenitybooking(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get Amenitybooking : {}", id);
        AmenityBooking e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /amenitybooking/:id} : delete the "id" amenitybooking.
     *
     * @param id the id of the amenitybooking to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteAmenitybooking(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Amenitybooking : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
