/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.entities.AmenityType;
import com.hoa.service.AmenitytypeService;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link AmenityType}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/amenitytype")
public class AmenitytypeController {

    private final Logger log = LoggerFactory.getLogger(AmenitytypeController.class);
	
    private final AmenitytypeService entityService;

 	public AmenitytypeController (AmenitytypeService entityService) {
		this.entityService = entityService;
	}

    /**
     * {@code POST  /amenitytype} : Create a new amenitytype.
     *
     * @param amenitytype the amenitytype to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new amenitytype.
     */
	@PostMapping("/add")
	public ResponseEntity<AmenityType> createAmenitytype(@RequestBody @Valid AmenityType amenitytype) {
         log.debug("REST request to save Amenitytype : {}", amenitytype);
         return new ResponseEntity<>(entityService.create(amenitytype), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /amenitytype} : Updates an existing amenitytype.
     *
     * @param amenitytype the amenitytype to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated amenitytype,
     * or with status {@code 400 (Bad Request)} if the amenitytype is not valid,
     * or with status {@code 500 (Internal Server Error)} if the amenitytype couldn't be updated.
     */
    @PutMapping("/update")
    public ResponseEntity<AmenityType> updateAmenitytype(@Valid @RequestBody AmenityType amenitytype) {
        log.debug("REST request to update Amenitytype : {}", amenitytype);
        AmenityType result = entityService.update(amenitytype);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /amenitytype} : get all the amenitytypes.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of amenitytype in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<AmenityType>> getAllAmenitytype() {
	    log.debug("REST request to get all amenitytypes");
        List<AmenityType> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /amenitytype/:id} : get the "id" amenitytype.
     *
     * @param id the id of the amenitytype to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the amenitytype, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/getOne/{id}")
    public ResponseEntity<AmenityType> getOneAmenitytype(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to get Amenitytype : {}", id);
        AmenityType e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /amenitytype/:id} : delete the "id" amenitytype.
     *
     * @param id the id of the amenitytype to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteAmenitytype(@PathVariable(value = "id") Integer id) {
        log.debug("REST request to delete Amenitytype : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
