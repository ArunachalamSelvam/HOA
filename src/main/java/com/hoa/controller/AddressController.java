/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.controller;

import com.hoa.dto.AddressDTO;
import com.hoa.entities.Address;
import com.hoa.exception.AddressNotFoundException;
import com.hoa.service.AddressService;
import com.hoa.utils.EntityDTOMapper;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link Address}.
 *
 * @author @aek
 */
@RestController
@RequestMapping("/api/public/address")
public class AddressController {

    private final Logger log = LoggerFactory.getLogger(AddressController.class);
	
    private final AddressService entityService;
    
    private final EntityDTOMapper entityDtoMapper;


 	public AddressController (AddressService entityService, EntityDTOMapper entityDtoMapper) {
		this.entityService = entityService;
		this.entityDtoMapper = entityDtoMapper;
	}

    /**
     * {@code POST  /address} : Create a new address.
     *
     * @param address the address to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new address.
     */
	@PostMapping("/add")
	public ResponseEntity<Address> createAddress(@RequestBody @Valid AddressDTO addressDto) {
		
		Address address = entityDtoMapper.toEntity(addressDto);
		
         log.debug("REST request to save Address : {}", address);
         return new ResponseEntity<>(entityService.create(address), HttpStatus.CREATED);
    }

   /**
     * {@code PUT  /address} : Updates an existing address.
     *
     * @param address the address to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated address,
     * or with status {@code 400 (Bad Request)} if the address is not valid,
     * or with status {@code 500 (Internal Server Error)} if the address couldn't be updated.
 * @throws AddressNotFoundException 
     */
    @PutMapping("/update/{addressId}")
    public ResponseEntity<Address> updateAddress(@PathVariable(value = "addressId") Integer addressId,@Valid @RequestBody AddressDTO addressDto) throws AddressNotFoundException {
    	
		Address address = entityDtoMapper.toEntity(addressDto);
		
        log.debug("REST request to update Address : {}", address);
        Address result = entityService.update(addressId,address);
        return ResponseEntity.ok().body(result);
    }

    /**
     * {@code GET  /address} : get all the addresss.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of address in body.
     */

    @GetMapping("/getAll")
    public ResponseEntity<List<Address>> getAllAddress() {
	    log.debug("REST request to get all addresss");
        List<Address> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /address/:id} : get the "id" address.
     *
     * @param id the id of the address to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the address, or with status {@code 404 (Not Found)}.
     * @throws AddressNotFoundException 
     */
    @GetMapping( "/getOne/{id}")
    public ResponseEntity<Address> getOneAddress(@PathVariable(value ="id") Integer id) throws AddressNotFoundException {
        log.debug("REST request to get Address : {}", id);
        Address e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

  /**
     * {@code DELETE  /address/:id} : delete the "id" address.
     *
     * @param id the id of the address to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteAddress(@PathVariable("id") Integer id) {
        log.debug("REST request to delete Address : {}", id);
        entityService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
