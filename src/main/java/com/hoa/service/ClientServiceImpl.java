/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:02 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.service;


import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.hoa.repositories.ClientRepository;
import com.hoa.entities.Client;
import com.hoa.exception.ClientIdNotFoundException;
import com.hoa.service.ClientService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;


import java.util.Collections;
import java.util.List;

/**
 * Service Implementation for managing {@link Client}.
 * @author aek
 */
@Service
@Transactional
public class ClientServiceImpl implements ClientService {


    private final ClientRepository repository;

    public ClientServiceImpl(ClientRepository repo) {
         this.repository = repo;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Client create(Client d) {
        try {
            return repository.save(d);

        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * {@inheritDoc}
     * @throws ClientIdNotFoundException 
     */
    @Override
    public Client update(Integer id ,Client d) throws ClientIdNotFoundException {
    	Client result = null;
    	try {
        	if(repository.existsById(id)) {
        		d.setClientid(id);
        		 result =  repository.saveAndFlush(d);
        	} 
        		
        	
           

        } catch (Exception ex) {
        	throw new ClientIdNotFoundException("Client Id : " +id+ " not Exists.");
           
        }
		return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Client getOne(Integer id) {
        try {
            return repository.findById(id).orElse(null);

        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Client> getAll() {
        try {
            return repository.findAll();

        } catch (Exception ex) {
            return Collections.emptyList();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long getTotal() {
        try {
            return repository.count();
        } catch (Exception ex) {
            return 0;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void delete(Integer id) {
        repository.deleteById(id);
    }

    /**
     * {@inheritDoc}
     */
   	@Override
	public Page<Client> findAllPaginate(Pageable pageable) {

		return repository.findAll(pageable);
	}

    /**
     * {@inheritDoc}
     */
    @Override
	public Page<Client> findAllSpecification(Specification<Client> specs, Pageable pageable) {
		return repository.findAll(specs, pageable);
	}

    
    @Transactional
    public Client updateClientCommunityId(Integer clientId, Integer communityId) {
        // Fetch the client entity by its ID
        Client client = repository.findById(clientId).orElse(null);
        
        if (client != null) {
            // Update the communityId
            client.setCommunityid(communityId);
            // Save the updated client entity
            return repository.save(client);
        } else {
            // Handle case where client with given ID is not found
            // You can throw an exception or handle it as per your requirement
            throw new RuntimeException("Client with ID " + clientId + " not found");
        }
    }
}
