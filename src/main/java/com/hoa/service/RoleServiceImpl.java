/*
*  Copyright (c) 2019. All right reserved
* Created on 2024-04-22 ( Date ISO 2024-04-22 - Time 21:42:03 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.hoa.service;


import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.hoa.repositories.RoleRepository;
import com.hoa.controller.RoleController;
import com.hoa.entities.Role;
import com.hoa.service.RoleService;

import javax.persistence.EntityNotFoundException;

import org.hibernate.service.spi.ServiceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;


import java.util.Collections;
import java.util.List;

/**
 * Service Implementation for managing {@link Role}.
 * @author aek
 */
@Service
@Transactional
public class RoleServiceImpl implements RoleService {

    private final Logger log = LoggerFactory.getLogger(RoleServiceImpl.class);

    private final RoleRepository repository;

    public RoleServiceImpl(RoleRepository repo) {
        this.repository = repo;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Role create(Role d) {
        try {
            return repository.save(d);
        } catch (Exception ex) {
            log.error("Error creating Role: {}", ex.getMessage());
            throw new ServiceException("An error occurred while creating the Role", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Role update(Integer roleId, Role role) {
        try {
            if (repository.existsById(roleId)) {
                role.setRoleid(roleId);
                return repository.saveAndFlush(role);
            }
            throw new EntityNotFoundException("Role with ID " + roleId + " not found");
        } catch (EntityNotFoundException ex) {
            log.error("Error updating Role: {}", ex.getMessage());
            throw ex;
        } catch (Exception ex) {
            log.error("Error updating Role", ex);
            throw new ServiceException("An error occurred while updating the Role", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Role getOne(Integer id) {
        try {
            return repository.findById(id).orElseThrow(() -> new EntityNotFoundException("Role with ID " + id + " not found"));
        } catch (Exception ex) {
            log.error("Error fetching Role: {}", ex.getMessage());
            throw new ServiceException("An error occurred while fetching the Role", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Role> getAll() {
        try {
            return repository.findAll();
        } catch (Exception ex) {
            log.error("Error fetching all Roles: {}", ex.getMessage());
            throw new ServiceException("An error occurred while fetching all Roles", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long getTotal() {
        try {
            return repository.count();
        } catch (Exception ex) {
            log.error("Error getting total count of Roles: {}", ex.getMessage());
            throw new ServiceException("An error occurred while getting the total count of Roles", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void delete(Integer id) {
        try {
            repository.deleteById(id);
        } catch (Exception ex) {
            log.error("Error deleting Role with ID {}: {}", id, ex.getMessage());
            throw new ServiceException("An error occurred while deleting the Role", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<Role> findAllPaginate(Pageable pageable) {
        try {
            return repository.findAll(pageable);
        } catch (Exception ex) {
            log.error("Error fetching paginated Roles: {}", ex.getMessage());
            throw new ServiceException("An error occurred while fetching paginated Roles", ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page<Role> findAllSpecification(Specification<Role> specs, Pageable pageable) {
        try {
            return repository.findAll(specs, pageable);
        } catch (Exception ex) {
            log.error("Error fetching Roles with specifications: {}", ex.getMessage());
            throw new ServiceException("An error occurred while fetching Roles with specifications", ex);
        }
    }

}